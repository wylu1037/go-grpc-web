// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: query.sql

package database

import (
	"context"
	"time"
)

const countLedgerRecord = `-- name: CountLedgerRecord :one
select count(1)
from ledger_record
`

func (q *Queries) CountLedgerRecord(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, countLedgerRecord)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const deleteLedgerRecord = `-- name: DeleteLedgerRecord :exec
delete
from ledger_record
where id = ?
`

func (q *Queries) DeleteLedgerRecord(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteLedgerRecord, id)
	return err
}

const getLedgerRecordById = `-- name: GetLedgerRecordById :one
select id,
       data_id,
       transaction_hash,
       business_name,
       business_contract_address,
       protocol_name,
       protocol_uri,
       created_at,
       updated_at
from ledger_record
where id = ?
limit 1
`

func (q *Queries) GetLedgerRecordById(ctx context.Context, id int64) (LedgerRecord, error) {
	row := q.db.QueryRowContext(ctx, getLedgerRecordById, id)
	var i LedgerRecord
	err := row.Scan(
		&i.ID,
		&i.DataID,
		&i.TransactionHash,
		&i.BusinessName,
		&i.BusinessContractAddress,
		&i.ProtocolName,
		&i.ProtocolUri,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getLedgerRecordByTransactionHash = `-- name: GetLedgerRecordByTransactionHash :one
select id,
       data_id,
       transaction_hash,
       business_name,
       business_contract_address,
       protocol_name,
       protocol_uri,
       created_at,
       updated_at
from ledger_record
where transaction_hash = ?
limit 1
`

func (q *Queries) GetLedgerRecordByTransactionHash(ctx context.Context, transactionHash string) (LedgerRecord, error) {
	row := q.db.QueryRowContext(ctx, getLedgerRecordByTransactionHash, transactionHash)
	var i LedgerRecord
	err := row.Scan(
		&i.ID,
		&i.DataID,
		&i.TransactionHash,
		&i.BusinessName,
		&i.BusinessContractAddress,
		&i.ProtocolName,
		&i.ProtocolUri,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const insertLedgerData = `-- name: InsertLedgerData :one
insert into ledger_record(data_id, transaction_hash, business_name, business_contract_address, protocol_name,
                          protocol_uri, created_at, updated_at)
values (?, ?, ?, ?, ?, ?, ?, ?)
returning id, data_id, transaction_hash, business_name, business_contract_address, protocol_name, protocol_uri, created_at, updated_at
`

type InsertLedgerDataParams struct {
	DataID                  string    `json:"dataId"`
	TransactionHash         string    `json:"transactionHash"`
	BusinessName            string    `json:"businessName"`
	BusinessContractAddress string    `json:"businessContractAddress"`
	ProtocolName            string    `json:"protocolName"`
	ProtocolUri             int64     `json:"protocolUri"`
	CreatedAt               time.Time `json:"createdAt"`
	UpdatedAt               time.Time `json:"updatedAt"`
}

func (q *Queries) InsertLedgerData(ctx context.Context, arg InsertLedgerDataParams) (LedgerRecord, error) {
	row := q.db.QueryRowContext(ctx, insertLedgerData,
		arg.DataID,
		arg.TransactionHash,
		arg.BusinessName,
		arg.BusinessContractAddress,
		arg.ProtocolName,
		arg.ProtocolUri,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i LedgerRecord
	err := row.Scan(
		&i.ID,
		&i.DataID,
		&i.TransactionHash,
		&i.BusinessName,
		&i.BusinessContractAddress,
		&i.ProtocolName,
		&i.ProtocolUri,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateLedgerRecord = `-- name: UpdateLedgerRecord :exec
update ledger_record
set data_id                   = ?,
    transaction_hash          = ?,
    business_name             = ?,
    business_contract_address = ?,
    protocol_name             = ?,
    protocol_uri              = ?,
    created_at                = ?,
    updated_at                = ?
where id = ?
`

type UpdateLedgerRecordParams struct {
	DataID                  string    `json:"dataId"`
	TransactionHash         string    `json:"transactionHash"`
	BusinessName            string    `json:"businessName"`
	BusinessContractAddress string    `json:"businessContractAddress"`
	ProtocolName            string    `json:"protocolName"`
	ProtocolUri             int64     `json:"protocolUri"`
	CreatedAt               time.Time `json:"createdAt"`
	UpdatedAt               time.Time `json:"updatedAt"`
	ID                      int64     `json:"id"`
}

func (q *Queries) UpdateLedgerRecord(ctx context.Context, arg UpdateLedgerRecordParams) error {
	_, err := q.db.ExecContext(ctx, updateLedgerRecord,
		arg.DataID,
		arg.TransactionHash,
		arg.BusinessName,
		arg.BusinessContractAddress,
		arg.ProtocolName,
		arg.ProtocolUri,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.ID,
	)
	return err
}
